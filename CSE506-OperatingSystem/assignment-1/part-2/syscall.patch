diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 78847b32e137..f3aa49d62a0d 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -360,6 +360,7 @@
 437	common	openat2			sys_openat2
 438	common	pidfd_getfd		sys_pidfd_getfd
 439	common	faccessat2		sys_faccessat2
+440	common	s2_encrypt		sys_s2_encrypt
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index b951a87da987..2cc9fd94c6af 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1424,4 +1424,6 @@ long compat_ksys_semtimedop(int semid, struct sembuf __user *tsems,
 			    unsigned int nsops,
 			    const struct old_timespec32 __user *timeout);
 
+asmlinkage long sys_s2_encrypt(char __user *str, int k);
+
 #endif
diff --git a/kernel/Makefile b/kernel/Makefile
index f3218bc5ec69..0e44a00f8798 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -48,6 +48,7 @@ obj-y += irq/
 obj-y += rcu/
 obj-y += livepatch/
 obj-y += dma/
+obj-y += encrypt.o
 
 obj-$(CONFIG_CHECKPOINT_RESTORE) += kcmp.o
 obj-$(CONFIG_FREEZER) += freezer.o
diff --git a/kernel/encrypt.c b/kernel/encrypt.c
new file mode 100644
index 000000000000..a94e13c67820
--- /dev/null
+++ b/kernel/encrypt.c
@@ -0,0 +1,48 @@
+#include <linux/kernel.h>
+#include <linux/err.h>
+#include <linux/syscalls.h>
+
+SYSCALL_DEFINE2(s2_encrypt, char __user *, str, int, key)
+{
+	// Initialize a new char array which will be a copy of user char array
+	char *kernel_str;
+	// Initialize return value if invalid inputs
+	int ret = -EINVAL;
+	int i;
+	
+	// Finding lenth of the input string
+	// using strnlen to handle cases to limit the user input as kernel memory is relatively small.Need to handle cases seperately where the user input is more than 256 bytes. Not handled in this code
+	int str_len = strnlen_user(str, 256);
+	
+	// Assigning space for the input string depending on the length obtained above
+	kernel_str = kmalloc(str_len, GFP_KERNEL); 
+	
+	// If failed to allocate space, return error code
+	if (!kernel_str){
+		return ret;
+	}
+	
+	// If failed to copy data from user space to kernel space, return error
+	if (copy_from_user(kernel_str, str, str_len) != 0){
+		return ret;
+	}
+	
+	// If the input key value is less than 1 or greater than 5 or string is emplty, return error code
+	if (key<1 || key>5 || kernel_str=='\0') {
+		return ret;
+	}
+	
+	// Incrementing the string by k ascii character for each character
+	while(kernel_str[i] != '\0') {
+		kernel_str[i++] += key;
+	}
+	
+	// printing the kernel message for the encrypted string
+	printk("[Kernel] Encrypted String: %s\n", kernel_str);
+	
+	// Deallocating the space locked for the kernel string
+	kfree(kernel_str);
+	
+	// returning 0 on successfull running of the code
+	return 0;
+}
